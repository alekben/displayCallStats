// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../agora-rte-extension

import { Extension } from "agora-rte-extension";
import { VideoProcessor } from "agora-rte-extension";
import type { IBaseProcessor, IExtension } from "agora-rte-extension";

export { SuperClarityExtension };

export default class SuperClarityExtension extends Extension<SuperClarityProcessor> implements ISCExtension {
    constructor();
}

export class SuperClarityProcessor extends VideoProcessor implements ISCProcessor {
    name: string;
    constructor();
    on(event: SuperClarityEvents, listener: Function): void;
    release(): Promise<void>;
}

export type ISCExtension = IExtension<ISCProcessor>;
export enum SuperClarityEvents {
    ERROR = "error",
    FIRST_VIDEO_FRAME = "first-video-frame",
    SKIPFRAME = "skip-frame",
    STATS = "stats"
}
export type ISuperClarityErrorMessage = string;
export interface ISuperClarityFirstVideoFrameMessage {
    enabled: boolean;
    time: number;
    cost: number;
}
export interface ISuperClaritySkipFrameMessage {
    time: number;
    totalDropped: number;
}
export interface ISuperClarityStatsMessage {
    enabled: boolean;
    time: number;
    cost: number;
    frameRate: number;
}
export type SuperClarityErrorFunction = (error: ISuperClarityErrorMessage) => void | Promise<void>;
export type SuperClarityFirstVideoFrameFunction = (stats: ISuperClarityFirstVideoFrameMessage) => void | Promise<void>;
export type SuperClaritySkipFrameFunction = (stats: ISuperClaritySkipFrameMessage) => void | Promise<void>;
export type SuperClarityStatsFunction = (stats: ISuperClarityStatsMessage) => void | Promise<void>;
export interface ISCProcessor extends IBaseProcessor {
    release(): Promise<void>;
    on(event: SuperClarityEvents.ERROR, listener: SuperClarityErrorFunction): void;
    off(event: SuperClarityEvents.ERROR, listener: SuperClarityErrorFunction): void;
    on(event: SuperClarityEvents.FIRST_VIDEO_FRAME, listener: SuperClarityFirstVideoFrameFunction): void;
    off(event: SuperClarityEvents.FIRST_VIDEO_FRAME, listener: SuperClarityFirstVideoFrameFunction): void;
    on(event: SuperClarityEvents.SKIPFRAME, listener: SuperClaritySkipFrameFunction): void;
    off(event: SuperClarityEvents.SKIPFRAME, listener: SuperClaritySkipFrameFunction): void;
    on(event: SuperClarityEvents.STATS, listener: SuperClarityStatsFunction): void;
    off(event: SuperClarityEvents.STATS, listener: SuperClarityStatsFunction): void;
}

export type ISCExtension = IExtension<ISCProcessor>;
export enum SuperClarityEvents {
    ERROR = "error",
    FIRST_VIDEO_FRAME = "first-video-frame",
    SKIPFRAME = "skip-frame",
    STATS = "stats"
}
export type ISuperClarityErrorMessage = string;
export interface ISuperClarityFirstVideoFrameMessage {
    enabled: boolean;
    time: number;
    cost: number;
}
export interface ISuperClaritySkipFrameMessage {
    time: number;
    totalDropped: number;
}
export interface ISuperClarityStatsMessage {
    enabled: boolean;
    time: number;
    cost: number;
    frameRate: number;
}
export type SuperClarityErrorFunction = (error: ISuperClarityErrorMessage) => void | Promise<void>;
export type SuperClarityFirstVideoFrameFunction = (stats: ISuperClarityFirstVideoFrameMessage) => void | Promise<void>;
export type SuperClaritySkipFrameFunction = (stats: ISuperClaritySkipFrameMessage) => void | Promise<void>;
export type SuperClarityStatsFunction = (stats: ISuperClarityStatsMessage) => void | Promise<void>;
export interface ISCProcessor extends IBaseProcessor {
    release(): Promise<void>;
    on(event: SuperClarityEvents.ERROR, listener: SuperClarityErrorFunction): void;
    off(event: SuperClarityEvents.ERROR, listener: SuperClarityErrorFunction): void;
    on(event: SuperClarityEvents.FIRST_VIDEO_FRAME, listener: SuperClarityFirstVideoFrameFunction): void;
    off(event: SuperClarityEvents.FIRST_VIDEO_FRAME, listener: SuperClarityFirstVideoFrameFunction): void;
    on(event: SuperClarityEvents.SKIPFRAME, listener: SuperClaritySkipFrameFunction): void;
    off(event: SuperClarityEvents.SKIPFRAME, listener: SuperClaritySkipFrameFunction): void;
    on(event: SuperClarityEvents.STATS, listener: SuperClarityStatsFunction): void;
    off(event: SuperClarityEvents.STATS, listener: SuperClarityStatsFunction): void;
}
